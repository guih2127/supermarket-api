Os Controllers controlam as requisições feitas para a API.

No Domain, temos as pastas Models, Repositories e Services. As Models
são as classes que definem entidades no nosso banco de dados. Os repositórios
e serviços, aqui, são interfaces que dizem como devem ser os metódos de serviço
e de repositório. Eles não possuem a lógica em si.

A pasta Extensions contém extensões de outras classes e aqui implementamos novos
metódos para as classes que desejamos extender.

A pasta Mapping contém classes que são responsáveis pela conversão das Models para
os Resources (no caso de um GET, por exemplo), ou dos Resources para as Models
(no caso de um POST, por exemplo). Aqui utilizamos o AutoMapper.

A pasta Persistence contém a pasta Repositories e Contexts. A pasta Contexts contém
nossas classes de contexto, que definem a nossa configuração do banco de dados. Como 
utilizamos o Code First, nós definimos como o banco será gerado a partir das nossas
models.
A pasta Repositories, por sua vez, contém nossos arquivos de repositório, ou seja, classes
responsáveis pela comunicação com o banco de dados. Aqui implementamos o que definimos
na Interface de repositório, anteriormente.
Temos também aqui uma interface chamado IUnitOfWork, que define metódos para começar, completar
ou abortar transações. Fazemos isso pois chamar saveChanges() diretamente no repositório 
nos diferentes metódos pode nos trazer problemas.

A pasta Resources contém nossas classes de Resources, ou seja, classes que serão
utilizadas para os EndPoints da nossa API. Não queremos utilizar nossas Models diretamente
nas requisições, pois nem sempre queremos trabalhar com todos os dados daquela model, por
questões de segurança e etc.

A pasta Services contém nossas classes de Serviço, ou seja, classes que irão englobar a
lógica de negócios da nossa API. A lógica dos metódos que nos definimos na interface de serviço
do domínio serão definidas aqui.

A pasta Communication contén classes que são utilizadas para definir como serão as respostas
para as nossas requisições. Por exemplo, um POST, em caso de sucesso, retornará o objeto 
salvo no banco de dados e um status 200 OK. Retornaremos essas informações a partir dessas classes.

Caminho 'Base' = Controller -> Service -> Repository