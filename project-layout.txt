-> Controllers - Gerenciam as requisições que serão feitas para a API. Nos controllers, utilizamos da injeção de
dependências para utilizar as tarefas que definimos em nossos Services. No caso de um GET, o próprio framework serializa
os dados para um formato JSON.

-> Services - Os services dentro da camada principal são classes que implementam as interfaces dos Services da camada
de domínio. As implementações (lógica de negócio) são colocadas exatamente nessas classes, porém, a camada de serviços não
deve acessar o banco de dados. Quem deve fazer isso são as classes de repositório e, por isso, nossos services devem conversar
com elas. Por isso, ao criarmos nossos services, eles iram, a partir da injeção de dependências, ter acesso à um ou mais
repositórios.

-> Services - Os services da camada de domínio são Interfaces. para definirmos o comportamento esperado para algo no C#, 
criamos uma interface. A interface diz como algo deve funcionar, mas não implementa a lógica real para o comportamento. 
Essa lógica é implementada em classes que implementam a interface criada. Nos nossos services, definimos Tasks, que serão 
executadas de forma assíncrona (por isso utilizamos async e await).

-> Models - Classes que representam entidades no banco de dados. Possui também Enums.

-> Repository - As classes de repositório são utilizadas para manusear dados do banco de dados. Essas classes encapsulam o
acesso ao banco e também a lógica para lidar com os dados. Esses repositórios possuem metódos para listar, criar, editar e
deletar objetos de um determinado modelo. Basicamente, esses metódos isolam o banco de dados do resto da aplicação. 
No que diz respeito ao banco de dados, temos também a pasta Persistence, que contem nossa classe de contexto (AppDbContext),
onde passamos a configuração do banco de dados para a classe base através de injeção de dependência. Lá criamos também 
as propriedades DbSet, cada uma delas equivalendo à uma entidade (model) diferente. Essas propriedades mapeiam as models com
as tabelas do banco de dados. Definimos aqui propriedades como not null, auto increment, max length, etc, que são mapeadas
na hora da criação do banco de dados (code first). Definimos também os relacionamentos.
Criamos um BaseRepository aqui, que é apenas uma classe abstrata da qual todos os outros repositories irão derivar. Criamos
ela como abstrata pois nenhuma outra classe poderá instanciá-la. Essa classe recebe uma instância da classe AppDbContext,
que dará acesso à todos os metódos que precisamos para fazer operações com o banco de dados.